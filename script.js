const currencySelect = document.getElementById("currency");
const rangeSelect = document.getElementById("range");
const langToggle = document.getElementById("lang-toggle");
const refreshBtn = document.getElementById("refresh");
let currentLang = 'ru';
let chart = null;
currencySelect.addEventListener("change", updateAll);
rangeSelect.addEventListener("change", fetchChart);
langToggle.addEventListener("click", () => {
    currentLang = currentLang === 'ru' ? 'en' : 'ru';
    updateTexts();
    updateAll();
});
refreshBtn.addEventListener("click", updateAll);

function updateTexts() {
    langToggle.textContent = currentLang === 'ru' ? 'EN' : 'RU';
    document.getElementById("title").textContent = currentLang === 'ru' ? '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç' : 'Exchange Rates';
    document.querySelector("label[for='currency']").textContent = currentLang === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:' : 'Choose currency:';
    document.querySelector("label[for='range']").textContent = currentLang === 'ru' ? '–î–∏–∞–ø–∞–∑–æ–Ω:' : 'Range:';
    refreshBtn.textContent = currentLang === 'ru' ? 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å' : 'üîÑ Refresh';
}
function updateAll() {
    fetchTodayRate();
    fetchChart();
}
async function fetchTodayRate() {
    const selected = currencySelect.value;
    const today = new Date();
    const dd = String(today.getDate()).padStart(2, '0');
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const yyyy = today.getFullYear();
    const dateReq = `${dd}/${mm}/${yyyy}`;
    const url = `https://www.cbr.ru/scripts/XML_daily.asp?date_req=${dateReq}`;
    try {
        const response = await fetch("https://cors-anywhere.herokuapp.com/" + url);
        const xmlText = await response.text();
        const parser = new DOMParser();
        const xml = parser.parseFromString(xmlText, "text/xml");

        const valute = [...xml.getElementsByTagName("Valute")].find(
            v => v.getElementsByTagName("CharCode")[0].textContent === selected
        );

        if (!valute) throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª—é—Ç—ã");

        const value = valute.getElementsByTagName("Value")[0].textContent.replace(",", ".");
        const rate = parseFloat(value).toFixed(2);

        document.getElementById("rates").innerHTML = `<p>${selected}: ${rate} ‚ÇΩ</p>`;
        document.getElementById("update-time").textContent =
            (currentLang === 'ru' ? '–û–±–Ω–æ–≤–ª–µ–Ω–æ: ' : 'Updated: ') +
            `${dd}.${mm}.${yyyy}`;
    } catch (error) {
        document.getElementById("rates").innerHTML = "<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</p>";
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞:", error);
    }
}
async function fetchChart() {
    const selected = currencySelect.value;
    const days = parseInt(rangeSelect.value);
    const labels = [];
    const dataPoints = [];

    let current = new Date();
    let collected = 0;

    while (collected < days) {
        const dd = String(current.getDate()).padStart(2, '0');
        const mm = String(current.getMonth() + 1).padStart(2, '0');
        const yyyy = current.getFullYear();
        const dateReq = `${dd}/${mm}/${yyyy}`;
        const url = `https://www.cbr.ru/scripts/XML_daily.asp?date_req=${dateReq}`;

        try {
            const response = await fetch("https://cors-anywhere.herokuapp.com/" + url);
            const xmlText = await response.text();
            const parser = new DOMParser();
            const xml = parser.parseFromString(xmlText, "text/xml");

            const valute = [...xml.getElementsByTagName("Valute")].find(
                v => v.getElementsByTagName("CharCode")[0].textContent === selected
            );

            if (valute) {
                const value = valute.getElementsByTagName("Value")[0].textContent.replace(",", ".");
                const rate = parseFloat(value).toFixed(2);
                labels.unshift(`${dd}.${mm}`);
                dataPoints.unshift(rate);
                collected++;
            }
        } catch (e) {
            console.warn("–ü—Ä–æ–ø—É—Å–∫ –¥–∞—Ç—ã:", dd, mm, yyyy);
        }

        current.setDate(current.getDate() - 1); // –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
    }
    const ctx = document.getElementById("chart").getContext("2d");
    if (chart) chart.destroy();
    chart = new Chart(ctx, {
        type: 'line',
        data: {
            labels,
            datasets: [{
                label: `${selected} / RUB`,
                data: dataPoints,
                borderColor: '#0066cc',
                fill: false
            }]
        },
        options: {
            responsive: true,
            plugins: { legend: { display: false } },
            scales: {
                y: { beginAtZero: false }
            }
        }
    });
}
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function updateTexts() {
    langToggle.textContent = currentLang === 'ru' ? 'EN' : 'RU';
    document.getElementById("title").textContent = currentLang === 'ru' ? '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç' : 'Exchange Rates';
    document.querySelector("label[for='currency']").textContent = currentLang === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:' : 'Choose currency:';
    document.querySelector("label[for='range']").textContent = currentLang === 'ru' ? '–î–∏–∞–ø–∞–∑–æ–Ω:' : 'Range:';
    refreshBtn.textContent = currentLang === 'ru' ? 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å' : 'üîÑ Refresh';
    themeToggle.textContent = currentLang === 'ru' 
        ? (document.body.classList.contains("dark-mode") ? "‚òÄ –¢–µ–º–∞" : "üåô –¢–µ–º–∞") 
        : (document.body.classList.contains("dark-mode") ? "‚òÄ Theme" : "üåô Theme");

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—ã
    currencySelect.options[0].text = currentLang === 'ru' ? 'USD (–¥–æ–ª–ª–∞—Ä)' : 'USD (dollar)';
    currencySelect.options[1].text = currentLang === 'ru' ? 'EUR (–µ–≤—Ä–æ)' : 'EUR (euro)';
    currencySelect.options[2].text = currentLang === 'ru' ? 'CNY (—é–∞–Ω—å)' : 'CNY (yuan)';

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    rangeSelect.options[0].text = currentLang === 'ru' ? '7 –¥–Ω–µ–π' : '7 days';
    rangeSelect.options[1].text = currentLang === 'ru' ? '30 –¥–Ω–µ–π' : '30 days';
}
updateAll();
setInterval(fetchTodayRate, 60 * 60 * 1000); // —Ä–∞–∑ –≤ —á–∞—Å
const themeToggle = document.getElementById("theme-toggle");
themeToggle.addEventListener("click", () => {
    document.body.classList.toggle("dark-mode");
    const isDark = document.body.classList.contains("dark-mode");
    themeToggle.textContent = isDark ? "‚òÄ –¢–µ–º–∞" : "üåô –¢–µ–º–∞";
});